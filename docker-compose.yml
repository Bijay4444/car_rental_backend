version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: car-rental-db
    environment:
      POSTGRES_DB: car_rental_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # External port 5433 to avoid conflicts
    networks:
      - car-rental-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d car_rental_management"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: car-rental-web
    ports:
      - "8080:8080"
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    environment:
      # Override database settings for Docker
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=car_rental_management
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_ENGINE=django.db.backends.postgresql_psycopg2
    env_file:
      - .env.docker
    depends_on:
      db:
        condition: service_healthy
    networks:
      - car-rental-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s  # Increased to 90s for more startup time

  nginx:
    image: nginx:1.24-alpine
    container_name: car-rental-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./staticfiles:/app/staticfiles:ro
      - ./media:/app/media:ro
    depends_on:
      web:
        condition: service_healthy
    networks:
      - car-rental-network
    restart: unless-stopped

  # Redis with different port to avoid conflicts
  redis:
    image: redis:7-alpine
    container_name: car-rental-redis
    ports:
      - "6380:6379"  # Changed external port to 6380
    volumes:
      - redis_data:/data
    networks:
      - car-rental-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  car-rental-network:
    driver: bridge