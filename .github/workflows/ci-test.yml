name: 🧪 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_car_rental
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ⚙️ Setup test environment
        run: |
          cp .env.example .env.test
          echo "DEBUG=True" >> .env.test
          echo "SECRET_KEY=test-secret-key-for-github-actions" >> .env.test
          echo "DB_NAME=test_car_rental" >> .env.test
          echo "DB_USER=postgres" >> .env.test
          echo "DB_PASSWORD=postgres" >> .env.test
          echo "DB_HOST=localhost" >> .env.test
          echo "DB_PORT=5432" >> .env.test
          echo "DB_ENGINE=django.db.backends.postgresql" >> .env.test
          echo "EMAIL_HOST_USER=test@example.com" >> .env.test
          echo "EMAIL_HOST_PASSWORD=test" >> .env.test

      - name: 🔄 Run migrations
        env:
          DJANGO_SETTINGS_MODULE: car_management_system.settings
        run: |
          python manage.py migrate

      - name: 🧪 Run Django tests
        env:
          DJANGO_SETTINGS_MODULE: car_management_system.settings
        run: |
          python manage.py test

      - name: 🔍 Code quality checks
        run: |
          pip install flake8 black isort
          # Check code formatting
          black --check .
          # Check import sorting
          isort --check-only .
          # Check for common errors
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,migrations

      - name: 🛡️ Security check
        run: |
          pip install safety bandit
          # Check for known security vulnerabilities
          safety check
          # Check for security issues in code
          bandit -r . -f json -o bandit-report.json || true

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            bandit-report.json
            .coverage

  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build Docker image
        run: |
          docker build \
            --tag car-rental-api:test \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            .

      - name: 🧪 Test Docker container
        run: |
          # Test that container starts successfully
          docker run --name test-container -d \
            -e DEBUG=True \
            -e SECRET_KEY=test-key \
            -e DB_NAME=sqlite \
            -e EMAIL_HOST_USER=test@example.com \
            car-rental-api:test

          # Wait for container to start
          sleep 30

          # Check if container is running
          docker ps | grep test-container

          # Check container logs
          docker logs test-container

          # Cleanup
          docker stop test-container
          docker rm test-container

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
